generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String?
  passwordHash String // 해싱한 비밀번호 저장
  createdAt    DateTime @default(now())

  // 사용자가 남긴 평점 1 : N
  ratings UserRating[]
}

model Media {
  id         Int      @id @default(autoincrement())
  type       String
  title      String
  year       Int?
  // OpenCritic 등의 외부 사이트에서 사용하는 식별자
  externalId String?
  // OpenCritic 등의 참조된 외부 사이트
  source     String?
  createdAt  DateTime @default(now())

  ratings UserRating[] // Content : Rating - 1 : N

  // 동일한 소스에 대한 externalID는 하나만 존재할 것 - 복합 유니크 키 [a, b] 의 조합의 유일성 보장
  @@unique([source, externalId])
  // 자주 사용될 것으로 예상되는 필드 인덱스화 - 조회 성능 최적화
  @@index([title])
  @@index([type, year])
}

model UserRating {
  id Int @id @default(autoincrement())

  userId    Int
  mediaId   Int
  score     Int // 추후 검증 단계 생성
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // fields: FK 컬럼, references: 참조 대상의 PK, onDelete: 부모 요소 삭제 시 어떻게 할 지
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  // 한 사용자는 같은 컨텐츠에 여러 변의 평점을 남길 수 없음
  @@unique([userId, mediaId])
  // 조회 최적화
  @@index([userId])
  @@index([mediaId])
}
